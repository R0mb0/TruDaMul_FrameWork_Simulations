-- Progetto d'esame Linguaggi di programmazione e verifica del software
-- TruDaMul: a Trusted Framework for Smart Territories based on Untrusted Data Mules

------------------------------------------------
MODULE main

VAR

c  : client(m1, m2);
m1 : mule(1, c, p);
m2 : mule(2, c, p);
p  : proxy(m1, m2, s);
s  : server(p);

---------- Proprietà da verificare -------------

------------------------------------------------

MODULE client(m1, m2)

VAR

-- stato null       : non ho nessun messaggio da inviare.
-- stato request    : mi metto in attesa di un mulo per inviare un messaggio.
-- stato according  : mi sto organizzando con il mulo per consegnargli il messaggio.
-- stato waiting    : messaggio consegnato al mulo, mi metto in attesa della risposta.
-- stato responce   : il mulo mi ha appena consegnato la risposta.
-- stato payment    : pago il mulo per il suo servizio.

state  : {null, request, according, waiting, responce, payment};

wallet : 0...50;  

ASSIGN

init(state)  := null;
next(state)  :=
    case
        ------------
        TRUE : state;
    esac;

init(wallet) := 50;
next(wallet) :=
    case
        ------------
        TRUE : wallet;
    esac;
------------------------------------------------

MODULE mule(id, c, p)

VAR

-- stato walking     : sto camminando in modo casuale, non mi è stato assegnato nessun compito.
-- stato talkingToC  : il client mi sta consegnando un messaggio. 
-- stato talkingToP  : il proxy mi sta consegnando una risposta.
-- stato goingToP    : sono in viaggio per consegnare il messaggio al proxy.
-- stato goingToC    : sono in viaggio per consegnare la risposta al client.
-- stato deliver     : sto consegnando il messaggio al proxy o la risposta al client.
-- stato wait        : sto aspettando di essere pagato.

state      : {walking, talkingToC, talkingToP, goingToP, goingToC, deliver, wait};

-- range in cui si trova il mulo.
myPosition : {client, proxy, middle};


ASSIGN

init(state) := walking;
next(state) :=
    case
        -----------
        TRUE : state;
    esac;

init(myPosition) := {client, proxy, middle};
next(myPosition) :=
    case
        ------
        TRUE : myPosition;
    esac;

------------------------------------------------

MODULE proxy(m1, m2, s)

VAR

-- stato null        : sono sospeso.
-- stato messagge    : il mulo mi ha appena consegnato un messaggio.
-- stato forward     : sto inoltrando il messaggio al server.
-- stato wait        : sto aspettando che il server mi consegni la risposta.
-- stato responce    : il server mi ha appena consegnato una risposta.
-- stato waitingMule : mi metto in attesa del mulo per affidargli la risposta.
-- stato according   : mi sto organizzando con il mulo per consegnargli la risposta.

state : {null, message, forward, wait, responce, waitingMule, according};

ASSIGN

init(state) := null;
next(state) :=
    case
        ----------
    esac;

------------------------------------------------


MODULE server(p)

VAR

-- stato null     : sono sospeso.
-- stato messagge : il proxy mi ha appena consegnato il messaggio.
-- stato make     : sto preparando la risposta.
-- stato forward  : inoltro la risposta al proxy.

state : {null, messagge, make , forward};

ASSIGN

init(state) := null;
next(state) :=
    case

    esac;


